#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , rework = require('..')
  , props = rework.properties
  , stdin = process.stdin;

// options

program
  .version(require('../package.json').version)
  .option('-v, --vendors <list>', 'specify list of vendors', list)
  .option('-e, --ease', 'add additional easing functions')
  .option('--vars', 'add css variable support')
  .parse(process.argv);

// --vendors

var vendors = prefix(program.vendors || ['o', 'ms', 'moz', 'webkit']);

// stdin boilerplate...

var str = '';
stdin.setEncoding('utf8');
stdin.on('data', function(chunk){ str += chunk });
stdin.on('end', done);
stdin.resume();

// parse list

function list(str) {
  return str.split(/ *, */);
}

// prefix names

function prefix(names) {
  return names.map(function(name){
    return '-' + name + '-';
  });
}

// rework

function done() {
  var style = rework(str);
  style.vendors(vendors);
  style.use(rework.keyframes());

  if (program.ease) {
    style.use(rework.ease());
  }

  style.use(rework.prefixValue('linear-gradient'))
  style.use(rework.prefixValue('radial-gradient'))
  style.use(rework.prefixValue('transform'))
  style.use(rework.prefix(props))
  style.use(rework.at2x())

  if (program.vars) {
    style.use(rework.vars());
  }

  if (~vendors.indexOf('-ms-')) {
    style.use(rework.opacity());
  }

  process.stdout.write(style.toString());
}
